#!/usr/bin/env bash

#SBATCH --cpus-per-task=4
#SBATCH --mem=40G
#SBATCH --time=00:50:00
#SBATCH --job-name=kmercount
#SBATCH --mail-user=aparna.pandey@students.unibe.ch
#SBATCH --mail-type=begin,end
#SBATCH --output=/data/users/apandey/genome_and_transcriptome_assembly_and_annotation/analysis/logs/02_KmerCount_%j.o
#SBATCH --error=/data/users/apandey/genome_and_transcriptome_assembly_and_annotation/analysis/logs/02_KmerCount_%j.e


#User needs to input path to the directory where the input data (sequencing reads) is (source) and the path to the directory where output data should go (destination) when running the script with sbatch
#example: sbatch 01_QC.sh </path/to/source/> </path/to/destination>

source=$1
destination=$2

cd ${destination}

# Make a directory to store the output data. -p option is used to avoid an error if a directory of that name already exists. If the directory already exists and output file names match any of the file names in the directory, those files will be overwritten.

mkdir -p 02_KmerCount/

cd 02_KmerCount/ 

# load the required  module(s)
module load UHTS/Analysis/jellyfish/2.3.0

# create function to run jellyfish for kmer counting and histogram generation
# This function takes two parameters: INPUT_DIR - input directory of the data and OUT_FILE- to specify tag for the output file. It then runs the Jellyfish tool, which is used for counting k-mers in DNA sequences.

run_jellyfish() {
    #sets the INPUT_DIR and OUT_FILE- variables based on the input parameters.
    INPUT_DIR=$1
    OUT_FILE=$2

    # creates an array FILES containing the paths of all the ".fastq.gz" files in the specified input directory.
    FILES=(${INPUT_DIR}/*.fastq.gz)
    # sets the OUTPUT_FILE variable to a value based on the OUT_FILE parameter
    OUTPUT_FILE="${OUT_FILE}_reads.jf"

    # Create a loop that iterates through the FILES array in pairs, reflecting the fact that these are paired-end sequencing files, and assigns FILE1 and FILE2 accordingly. Depending on the organization of your files in the source directory, you may need to adjust this section. In this scenario, the paired-end files are located consecutively, so the loop progresses in intervals of two.
    
    for ((i = 0; i < ${#FILES[@]}; i += 2)); do
        FILE1="${FILES[i]}"
        FILE2="${FILES[i + 1]}"
    
    # run two Jellyfish commands:

    # jellyfish count: This command counts k-mers in the input DNA sequences from the specified files, with following parameters:
    # -C: This option specifies that the input sequences are DNA sequences and should be canonicalized i.e., it collapses k-mers with their reverse complements.
    # -m 19: This sets the size of k-mers to 19. K-mers are subsequences of length k in the DNA sequences.
    # -s 5G: This sets the hash size to 5 gigabytes. The hash size determines the amount of memory allocated for storing k-mer counts.
    # -t 4: This specifies the number of threads to use for counting k-mers. It's set to 4 threads for parallel processing.    
    # -o "$OUTPUT_FILE": This specifies the output file where the k-mer counts will be written
    
    # jellyfish can not read compressed files directly,so the files are provided with process substitution of zcat
    jellyfish count -C -m 21 -s 5G -t 4 -o "$OUTPUT_FILE" <(zcat "$FILE1") <(zcat "$FILE2") 

    # jellyfish histo: This command generates a histogram of k-mer counts:
    # -t 10: This sets the number of threads to use for generating the histogram for parallel processing.
    # "$OUTPUT_FILE": This specifies the input file containing the k-mer counts generated by the jellyfish count command.
    # > "${OUTPUT_FILE}.histo": This redirects the output of the histogram generation to a file with a ".histo" extension.
    jellyfish histo -t 10 "$OUTPUT_FILE" > "${OUTPUT_FILE}.histo"
    done
}

# Following creation of a function for running jellyfish, run it by specifying the location of the input data and the tag for the output file 

#Illumina 
IN="${source}/Illumina"
OUT="Illumina"
run_jellyfish "$IN" "$OUT"

#pacbio
IN="${source}/pacbio"
OUT="pacbio"
run_jellyfish "$IN" "$OUT"

#RNAseq
IN="${source}/RNAseq"
OUT="RNAseq"
run_jellyfish "$IN" "$OUT"

# You can now copy the output files to your local directory for further processing
# You can edit the following command and replace the host server, source_file and local destination to do so.

#  scp user@host:source_file destination_file

