#!/usr/bin/env bash
#SBATCH --time=01:15:00
#SBATCH --mem=6G
#SBATCH --cpus-per-task=4
#SBATCH --job-name=nucmer
#SBATCH --partition=pall
#SBATCH --mail-user=aparna.pandey@students.unibe.ch
#SBATCH --mail-type=begin,end
#SBATCH --output=/data/users/apandey/genome_and_transcriptome_assembly_and_annotation/analysis/logs/09_nucmer_%j.o
#SBATCH --error=/data/users/apandey/genome_and_transcriptome_assembly_and_annotation/analysis/logs/09_nucmer_%j.e

# define input and output directories
# User needs to provide path to the directory containing all the unpolished genome assemblies (this drectory contains sub-directories with Flye and Canu assemblies ) i.e., source1
# User also needs to provide path to the directory containing polished genome assemblies i.e., source2
# User needs to provide path to the destination folder where output data should be deposited i.e., destination

# example: 09_nucmer.sh </path/to/source1/> </path/to/source2> </path/to/destination> 

source1=$1
source2=$2
destination=$3

# Define four different inputs types: one each for unpolished and polished Flye and Canu assemblies.

INPUT_FLYE_UNPOLISHED=${source1}/Flye_genome_assembly
INPUT_CANU_UNPOLISHED=${source1}/Canu_genome_assembly
INPUT_FLYE_POLISHED=${source2}/mapped_bam_files
INPUT_CANU_POLISHED=${source2}/mapped_bam_files

# Load the required module(s)
module add UHTS/Analysis/mummer/4.0.0beta1

# Set the variable REF_GEN to the directory path to the reference genome
# Change this depending on where the reference genome is.
REF_GEN=/data/courses/assembly-annotation-course/references

# Change directory yo the destination directory
cd ${destination}

# Create a directory for the results and go to that directory
mkdir -p ${destination}/07_Comparison
cd ${destination}/07_Comparison

# Run nucmer to map the assembled genomes (flye and canu) against the reference genome with the following parameters/option:

# nucmer [options] <reference file> <query file>
# -b int / --breaklen: Specifies the maximum cluster length. Clusters are groups of matches separated by gaps of less than the specified length (default 200).
# -c int / --mincluster: Sets the minimum cluster length. Clusters shorter than this length are ignored (default 65).
# -p string / --prefix: Specifies the prefix for the output files generated by nucmer.

# Run nucmer to map the polished Flye assembly
nucmer -b 1000 -c 1000 -p Flye_polished ${REF_GEN}/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa ${INPUT_FLYE_POLISHED}/Flye_polished.fasta

# Run nucmer to map the polished Canu assembly
nucmer -b 1000 -c 1000 -p Canu_polished ${REF_GEN}/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa ${INPUT_CANU_POLISHED}/Canu_polished.fasta

# Run nucmer to map canu and  flye assemblies against each other
nucmer -b 1000 -c 1000 -p Flye_Canu ${INPUT_FLYE_POLISHED}/Flye_polished.fasta ${INPUT_CANU_POLISHED}/Canu_polished.fasta


mkdir -p ${destination}/07_Comparison/plots

cd ${destination}/07_Comparison/plots

# For all combinations, run mummerplot
# syntax: mummerplot [options] <match file>
# Options:
    # match file = output file of nucmer (generally either a three column match list from mummer or the delta file from nucmer or promer)
    #  --Rfile (-R) <string>: desired reference sequences; generate a multiplot by using the order and length information contained in this file, either a FastA file of the desired reference sequences or a tab-delimited list of sequence IDs, lengths and orientations [ +-]
    #  --Qfile (-Q) <string>: desired query sequences; generate a multiplot by using the order and length information contained in this file, either a FastA file of the desired query sequences or a tab-delimited list of sequence IDs, lengths and orientations [ +-]
    # --filter (-f): Only display alignments which represent the "best" one-to-one mapping of reference and query subsequences (requires delta formatted input)
    #  -t <string>: Set the output terminal to x11, postscript or png (alternative: --x11 --postscript --png)
    #  -s <string>: Set the output size to small, medium or large (alternative: --small --medium --large)
    # --layout (-l): Layout a multiplot by ordering and orienting sequences such that the largest hits cluster near the main diagonal (requires delta formatted input)
    # -p: prefix for output
    
export PATH=/software/bin:$PATH

# REFERENCE vs. Polished Canu assembly
mummerplot  -f -l -p Canu_polished_vs_Ref -R ${REF_GEN}/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa -Q ${INPUT_CANU_POLISHED}/Canu_polished.fasta -t png -s large ${destination}/07_Comparison/Canu_polished.delta

# REFERENCE vs. Polished Flye assembly
mummerplot  -f -l -p Flye_polished_vs_Ref -R ${REF_GEN}/Arabidopsis_thaliana.TAIR10.dna.toplevel.fa -Q ${INPUT_FLYE_POLISHED}/Flye_polished.fasta -t png -s large ${destination}/07_Comparison/Flye_polished.delta

# Polished Flye assembly vs. Polished Canu assembly
mummerplot  -f -l -p Flye_polished_vs_Canu_polished -R ${INPUT_FLYE_POLISHED}/Flye_polished.fasta -Q ${INPUT_CANU_POLISHED}/Canu_polished.fasta -t png -s large ${destination}/07_Comparison/Flye_Canu.delta

